name: "DevSecOps Güvenlik Pipeline"

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    - cron: '0 0 * * 1'  # Her Pazartesi günü çalıştır

jobs:
  initialize:
    name: Pipeline Başlangıcı
    runs-on: ubuntu-latest
    outputs:
      runtag: ${{ steps.set-runtag.outputs.runtag }}
    steps:
      - name: Repoyu Kontrol Et
        uses: actions/checkout@v4

      - name: Runtag Oluştur
        id: set-runtag
        run: |
          echo "runtag=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Pipeline Bilgisi
        run: |
          echo "DevSecOps Pipeline başlatılıyor"
          echo "Runtag: ${{ steps.set-runtag.outputs.runtag }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"

  secret-scan:
    name: GitLeaks - Sır Taraması
    needs: initialize
    runs-on: ubuntu-latest
    steps:
      - name: Repoyu Kontrol Et
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: GitLeaks ile Sızıntı Taraması
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  setup-dependencies:
    name: Bağımlılıkları Hazırla
    needs: initialize
    runs-on: ubuntu-latest
    steps:
      - name: Repoyu Kontrol Et
        uses: actions/checkout@v4

      - name: Node.js Ayarla
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Global Paketleri Kur
        run: |
          npm install -g @angular/cli
          npm install -g @angular-builders/custom-webpack

      - name: Ana Dizin Paketleri Yükle
        run: |
          # Skript içinde postinstall komutlarını çalıştırmadan paketleri yükle
          npm install --ignore-scripts --legacy-peer-deps

      - name: Package Lock Oluştur
        run: |
          # Package-lock.json oluştur (dependency-check için gerekli)
          npm install --package-lock-only --legacy-peer-deps

      - name: Frontend Paketleri Yükle
        working-directory: ./frontend
        run: |
          # Frontend paketlerini ayrıca yükle
          npm install --legacy-peer-deps
          npm install --save-dev @angular-builders/custom-webpack

      - name: Frontend Angular Paketini Kontrol Et
        working-directory: ./frontend
        run: |
          echo "Package.json içeriği:"
          cat package.json | grep -A 5 devDependencies
          echo "--------------------"
          echo "Angular builder paketi kontrolü:"
          npm list @angular-builders/custom-webpack || true

      - name: Paketleri Önbelleğe Al
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

  sast:
    name: Statik Kod Analizi
    needs: [initialize, setup-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Repoyu Kontrol Et
        uses: actions/checkout@v4

      - name: Node.js Ayarla
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Global Angular CLI Kur
        run: |
          npm install -g @angular/cli
          npm install -g @angular-builders/custom-webpack

      - name: Önbelleği Geri Yükle
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: ESLint ile Kod Analizi (Ana Dizin)
        run: npm run lint || true

      - name: Semgrep ile Kod Analizi
        uses: semgrep/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ secrets.SEMGREP_DEPLOYMENT_ID }}
          config: >-
            p/owasp-top-ten
            p/javascript
            p/nodejs
            p/typescript
            p/angular
          generateSarif: "1"
          output: semgrep.sarif

      - name: Semgrep Sonuçlarını Yükle
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  dependency-check:
    name: Bağımlılık Güvenlik Taraması
    needs: [initialize, setup-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Repoyu Kontrol Et
        uses: actions/checkout@v4

      - name: Node.js Ayarla
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Önbelleği Geri Yükle
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Suppression Dosyası Oluştur
        run: |
          cat > dependency-check-suppression.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
             <suppress>
                <notes><![CDATA[
                Test dosyalarından gelen yanlış pozitif uyarılar
                ]]></notes>
                <filePath regex="true">.*(/|\\)test(/|\\).*</filePath>
                <vulnerabilityName regex="true">.*</vulnerabilityName>
             </suppress>
             <suppress>
                <notes><![CDATA[
                Frontend bağımlılıkları için uyarılar
                ]]></notes>
                <filePath regex="true">.*(/|\\)frontend(/|\\).*</filePath>
                <vulnerabilityName regex="true">.*</vulnerabilityName>
             </suppress>
          </suppressions>
          EOF

      - name: Suppression Dosyasını Göster
        run: |
          ls -la
          echo "Suppression dosyası içeriği:"
          cat dependency-check-suppression.xml

      - name: NPM Audit (Ana Dizin)
        run: npm audit --production --audit-level=high || true

      - name: NPM Audit (Frontend)
        working-directory: ./frontend
        run: npm audit --production --audit-level=high || true

      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        id: dependency-check
        with:
          project: "juice-shop"
          path: "."
          format: "HTML"
          out: "./reports"
          args: >
            --enableRetired
            --suppression="dependency-check-suppression.xml"
            --failOnCVSS=8
            --exclude="**/test/files/**"
            --exclude="**/frontend/node_modules/**"

      - name: Dependency-Check Raporu Yükle
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ./reports/dependency-check-report.html

  sbom:
    name: SBOM Oluşturma
    needs: [initialize, setup-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Repoyu Kontrol Et
        uses: actions/checkout@v4

      - name: Node.js Ayarla
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Önbelleği Geri Yükle
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Syft ile SBOM Oluştur (Ana Dizin)
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx-json
          output-file: ./sbom-${{ needs.initialize.outputs.runtag }}.cyclonedx.json

      - name: SBOM Dosyasını Arşivle
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx-${{ needs.initialize.outputs.runtag }}
          path: ./sbom-${{ needs.initialize.outputs.runtag }}.cyclonedx.json

  security-report:
    name: Güvenlik Raporu
    needs: [initialize, secret-scan, sast, dependency-check, sbom]
    runs-on: ubuntu-latest
    steps:
      - name: Repoyu Kontrol Et
        uses: actions/checkout@v4

      - name: Raporları İndir
        uses: actions/download-artifact@v4
        with:
          path: ./reports

      - name: Özet Güvenlik Raporu Oluştur
        run: |
          echo "# Güvenlik Tarama Sonuçları - ${{ needs.initialize.outputs.runtag }}" > security-report.md
          echo "## Tarama Özeti" >> security-report.md
          echo "* Tarih: $(date)" >> security-report.md
          echo "* Branch: ${{ github.ref }}" >> security-report.md
          echo "* Commit: ${{ github.sha }}" >> security-report.md
          echo "* Runtag: ${{ needs.initialize.outputs.runtag }}" >> security-report.md
          echo "## Gizli Bilgi Taraması" >> security-report.md
          echo "GitLeaks taraması tamamlandı" >> security-report.md
          echo "## Statik Kod Analizi" >> security-report.md
          echo "Semgrep taraması tamamlandı" >> security-report.md
          echo "## Bağımlılık Taraması" >> security-report.md
          echo "NPM Audit ve OWASP Dependency-Check tamamlandı" >> security-report.md
          echo "## SBOM" >> security-report.md
          echo "Syft ile SBOM oluşturma tamamlandı" >> security-report.md

      - name: Güvenlik Raporunu Arşivle
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ needs.initialize.outputs.runtag }}
          path: security-report.md

  notify:
    name: Bildirim Gönder
    needs: [initialize, security-report]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Bildirim Durumu
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "Pipeline başarıyla tamamlandı! 🚀"
            echo "Runtag: ${{ needs.initialize.outputs.runtag }}"
          else
            echo "Pipeline'da hatalar oluştu! ⚠️"
            echo "Runtag: ${{ needs.initialize.outputs.runtag }}"
          fi 
